plot(H,Hc,main="Commute Time + Diversity vs Coalescence Time (Asymmetric Graph)",
xlab="Coalescence Time",ylab="Commute Time + Diversity")
abline(0,1) #add y=x line
gr <- graph_from_adjacency_matrix(G_adj,mode="directed",weighted=TRUE)
E(gr)$curved <- TRUE
plot(gr,layout=as.matrix(expand.grid(1:width,1:height)),edge.width=g,edge.label=paste0("g",1:ng,"=",round(g*1000)/1000))
plot(gr,layout=as.matrix(expand.grid(1:width,1:height)),edge.width=g,edge.label=paste0("g",1:ng,"=",round(g*1000)/1000),
main="Asymmetric Graph")
source('~/Dropbox/code/mcStartSearch.R')
source('~/Dropbox/code/findG_HMC.R')
source('~/Dropbox/code/findG_MH4.R')
source('~/Dropbox/code/findG_MH4_com.R')
source('~/Dropbox/code/findG2.R')
require(Matrix)
require(igraph)
require(reshape)
require(ggplot2)
seed <- sample(1000000000,1)
set.seed(seed)
width <- 4
height <- 4
n <- width*height
G_adj <- get.adjacency(make_lattice(c(width,height)))
G <- G_adj
ng <- length(G_adj@x)
g <- rexp(ng,1)
g <- .1*ceiling(10*g)
G@x <- g
diag(G) <- -rowSums(G)
GG <- kronecker(G,diag(n)) + kronecker(diag(n),G)
gr <- graph_from_adjacency_matrix(G_adj,mode="directed",weighted=TRUE)
E(gr)$curved <- TRUE
plot(gr,layout=as.matrix(expand.grid(1:width,1:height)),edge.width=g,edge.label=paste0("g",1:ng,"=",round(g*1000)/1000),
main="Asymmetric Graph")
seed <- sample(1000000000,1)
set.seed(seed)
width <- 4
height <- 4
n <- width*height
G_adj <- get.adjacency(make_lattice(c(width,height)))
G <- G_adj
ng <- length(G_adj@x)
g <- rexp(ng,1)
g <- .1*ceiling(10*g)
g <- rep(.7,ng)
g[1,4,7,12,16,20,26,30,34,40,43,46,2,5,8,10,13,17,21,24,27,31,35,38] <- 1.3
g[c(1,4,7,12,16,20,26,30,34,40,43,46,2,5,8,10,13,17,21,24,27,31,35,38)] <- 1.3
gr <- graph_from_adjacency_matrix(G_adj,mode="directed",weighted=TRUE)
E(gr)$curved <- TRUE
plot(gr,layout=as.matrix(expand.grid(1:width,1:height)),edge.width=g,edge.label=paste0("g",1:ng,"=",round(g*1000)/1000),
main="Asymmetric Graph")
G@x <- g
diag(G) <- -rowSums(G)
GG <- kronecker(G,diag(n)) + kronecker(diag(n),G)
coal_type = 3   #1 is constant everywhere, 2 is iid, 3 is user specified
if(coal_type == 1){
gam <- rep(rexp(1,1),n)+.5
gam <- .1*ceiling(10*gam)
const_coal = TRUE
ngam <- 1
} else if(coal_type == 2){
gam <- rexp(n,1)+.5
gam <- .1*ceiling(10*gam)
const_coal = FALSE
ngam <- n
} else if(coal_type == 3){
gam <- rep(1,n)
if(length(gam) != n) stop("invalid number of coalescence rates")
const_coal = FALSE #set this as needed
ngam <- n #set this as needed
} else{
stop("invalid coalescence type")
}
Gam <- c(diag(gam))
GG_c <- GG - diag(Gam)
system.time(H <- solve(GG_c,rep(-1,n^2)))
H <- matrix(H,nrow=n)
print(H)
Hc <- HcCalc(g,diag(H),G_adj,n)
print(Hc)
print(Hc-H)
plot(H,Hc,main="Commute Time + Diversity vs Coalescence Time (Asymmetric Graph)",
xlab="Coalescence Time",ylab="Commute Time + Diversity")
abline(0,1) #add y=x line
g <- rep(.5,ng)
g[c(1,4,7,12,16,20,26,30,34,40,43,46,2,5,8,10,13,17,21,24,27,31,35,38)] <- 1.5
G@x <- g
diag(G) <- -rowSums(G)
GG <- kronecker(G,diag(n)) + kronecker(diag(n),G)
coal_type = 3   #1 is constant everywhere, 2 is iid, 3 is user specified
if(coal_type == 1){
gam <- rep(rexp(1,1),n)+.5
gam <- .1*ceiling(10*gam)
const_coal = TRUE
ngam <- 1
} else if(coal_type == 2){
gam <- rexp(n,1)+.5
gam <- .1*ceiling(10*gam)
const_coal = FALSE
ngam <- n
} else if(coal_type == 3){
gam <- rep(1,n)
if(length(gam) != n) stop("invalid number of coalescence rates")
const_coal = FALSE #set this as needed
ngam <- n #set this as needed
} else{
stop("invalid coalescence type")
}
Gam <- c(diag(gam))
GG_c <- GG - diag(Gam)
system.time(H <- solve(GG_c,rep(-1,n^2)))
H <- matrix(H,nrow=n)
print(H)
Hc <- HcCalc(g,diag(H),G_adj,n)
print(Hc)
print(Hc-H)
plot(H,Hc,main="Commute Time + Diversity vs Coalescence Time (Asymmetric Graph)",
xlab="Coalescence Time",ylab="Commute Time + Diversity")
abline(0,1) #add y=x line
1/.6
1/.7
g <- rep(.7,ng)
g[c(1,4,7,12,16,20,26,30,34,40,43,46,2,5,8,10,13,17,21,24,27,31,35,38)] <- 1.4
G@x <- g
diag(G) <- -rowSums(G)
GG <- kronecker(G,diag(n)) + kronecker(diag(n),G)
coal_type = 3   #1 is constant everywhere, 2 is iid, 3 is user specified
if(coal_type == 1){
gam <- rep(rexp(1,1),n)+.5
gam <- .1*ceiling(10*gam)
const_coal = TRUE
ngam <- 1
} else if(coal_type == 2){
gam <- rexp(n,1)+.5
gam <- .1*ceiling(10*gam)
const_coal = FALSE
ngam <- n
} else if(coal_type == 3){
gam <- rep(1,n)
if(length(gam) != n) stop("invalid number of coalescence rates")
const_coal = FALSE #set this as needed
ngam <- n #set this as needed
} else{
stop("invalid coalescence type")
}
Gam <- c(diag(gam))
GG_c <- GG - diag(Gam)
system.time(H <- solve(GG_c,rep(-1,n^2)))
H <- matrix(H,nrow=n)
print(H)
Hc <- HcCalc(g,diag(H),G_adj,n)
print(Hc)
print(Hc-H)
plot(H,Hc,main="Commute Time + Diversity vs Coalescence Time (Asymmetric Graph)",
xlab="Coalescence Time",ylab="Commute Time + Diversity")
abline(0,1) #add y=x line
gr <- graph_from_adjacency_matrix(G_adj,mode="directed",weighted=TRUE)
E(gr)$curved <- TRUE
plot(gr,layout=as.matrix(expand.grid(1:width,1:height)),edge.width=g,edge.label=paste0("g",1:ng,"=",round(g*1000)/1000),
main="Asymmetric Graph")
dev.off()
seed <- sample(1000000000,1)
set.seed(seed)
width <- 4
height <- 4
n <- width*height
G_adj <- get.adjacency(make_lattice(c(width,height)))
G <- G_adj
ng <- length(G_adj@x)
g <- rexp(ng,1)
g <- .1*ceiling(10*g)
g <- rep(.7,ng)
g[c(1,4,7,12,16,20,26,30,34,40,43,46,2,5,8,10,13,17,21,24,27,31,35,38)] <- 1.4
G@x <- g
diag(G) <- -rowSums(G)
GG <- kronecker(G,diag(n)) + kronecker(diag(n),G)
coal_type = 3   #1 is constant everywhere, 2 is iid, 3 is user specified
if(coal_type == 1){
gam <- rep(rexp(1,1),n)+.5
gam <- .1*ceiling(10*gam)
const_coal = TRUE
ngam <- 1
} else if(coal_type == 2){
gam <- rexp(n,1)+.5
gam <- .1*ceiling(10*gam)
const_coal = FALSE
ngam <- n
} else if(coal_type == 3){
gam <- rep(1,n)
if(length(gam) != n) stop("invalid number of coalescence rates")
const_coal = FALSE #set this as needed
ngam <- n #set this as needed
} else{
stop("invalid coalescence type")
}
Gam <- c(diag(gam))
GG_c <- GG - diag(Gam)
system.time(H <- solve(GG_c,rep(-1,n^2)))
H <- matrix(H,nrow=n)
print(H)
Hc <- HcCalc(g,diag(H),G_adj,n)
print(Hc)
print(Hc-H)
plot(H,Hc,main="Commute Time + Diversity vs Coalescence Time (Asymmetric Graph)",
xlab="Coalescence Time",ylab="Commute Time + Diversity")
abline(0,1) #add y=x line
sig2ep <- mean(H)/1000
H_noise <- H + matrix(rnorm(n^2,mean=0,sd=sig2ep),n)
H_noise[lower.tri(H_noise)] <- t(H_noise)[lower.tri(H_noise)]
time <- system.time(ans2 <- findG2(H,G_adj,const_coal))
print(max(abs(ans2$G-G)))
print(max(abs(ans2$gam-gam)))
system.time(ans3 <- findG2(H_noise,G_adj,const_coal))
print(max(abs(ans2$G-ans3$G)))
print(ans2$G)
H2 <- H
H2[2,] <- NA
H2[,2] <- NA
H2_noise <- H_noise
H2_noise[c(2,7),] <- NA
H2_noise[,c(2,7)] <- NA
H2_noise <- as.matrix(H2_noise)
h <- as.vector(H[upper.tri(H,diag=TRUE)])
h_noise <- as.vector(H_noise[upper.tri(H_noise,diag=TRUE)])
time4 <- system.time(ans4 <- findG_MH4(H,G_adj,const_coal,iter=1000000,sig2ep=sig2ep))
if(const_coal == TRUE) maxval <- length(ans4$gam) else maxval <- length(ans4$gam[,1])
minval <- round(maxval/2)
sdG_init <- mean(ans4$sdG[minval:maxval])
sdgam_init <- mean(ans4$sdgam[minval:maxval])
time1 <- system.time(ans4 <- findG_MH4(H,G_adj,const_coal,iter=4000000,fixed_start=TRUE,g_init=ans4$g[maxval,],gam_init=ans4$gam[maxval,],
fixed_sd=TRUE,fixed_sd_start=TRUE,sdG_init=sdG_init,sdgam_init=sdgam_init,sig2ep=sig2ep))
time6 <- system.time(ans6coal <- findG_MH4_com(H,G_adj,iter=1000000,sig2ep=sig2ep))
maxval <- length(ans6coal$q[,1])
minval <- round(maxval/2)
sdG_init <- mean(ans6coal$sdG[minval:maxval])
sdq_init <- mean(ans6coal$sdq[minval:maxval])
time1 <- system.time(ans6coal <- findG_MH4_com(H,G_adj,iter=4000000,fixed_start=TRUE,g_init=ans6coal$g[maxval,],q_init=ans6coal$q[maxval,],
fixed_sd=TRUE,fixed_sd_start=TRUE,sdG_init=sdG_init,sdq_init=sdq_init,sig2ep=sig2ep))
save.image("~/4x4_asym_both.RData")
boxplot(ans4$g[,order(g)],outline=FALSE,main="4x4 Asymmetric Graph (Coalescence Time Inference)",names=as.character(order(g)),
xlab="Parameter Index",ylab="Parameter Value (rate)",
ylim=c(0,10))
points(g[order(g)],pch=19,col=3)
boxplot(ans4$g[,order(g)],outline=FALSE,main="4x4 Asymmetric Graph (Coalescence Time Inference)",names=as.character(order(g)),
xlab="Parameter Index",ylab="Parameter Value (rate)",
ylim=c(0,5))
points(g[order(g)],pch=19,col=3)
boxplot(ans6coal$g[,order(g)],outline=FALSE,main="4x4 Asymmetric Graph (Commute Time Inference)",
names=as.character(order(g)),xlab="Parameter Index",ylab="Parameter Value (rate)",
ylim=c(0,10))
points(g[order(g)],pch=19,col=3)
boxplot(ans6coal$g[,order(g)],outline=FALSE,main="4x4 Asymmetric Graph (Commute Time Inference)",
names=as.character(order(g)),xlab="Parameter Index",ylab="Parameter Value (rate)",
ylim=c(0,7))
points(g[order(g)],pch=19,col=3)
boxplot(ans4$g[,order(g)],outline=FALSE,main="4x4 Asymmetric Graph (Coalescence Time Inference)",names=as.character(order(g)),
xlab="Parameter Index",ylab="Parameter Value (rate)",
ylim=c(0,7))
points(g[order(g)],pch=19,col=3)
source('~/Dropbox/code/run_mcmc.R')
burn_iter=10000,iter=10000)
run_mcmc(3,2,fixed_g=FALSE,g=1,coal_type=3,gam=1,const_coal=TRUE,noise=1/500,seed=sample(1000000000,1),
burn_iter=10000,iter=10000)
source('~/Dropbox/code/findG2.R')
run_mcmc(3,2,fixed_g=FALSE,g=1,coal_type=3,gam=1,const_coal=TRUE,noise=1/500,seed=sample(1000000000,1),
burn_iter=10000,iter=10000)
source('~/Dropbox/code/findG_MH4.R')
run_mcmc(3,2,fixed_g=FALSE,g=1,coal_type=3,gam=1,const_coal=TRUE,noise=1/500,seed=sample(1000000000,1),
burn_iter=10000,iter=10000)
source('~/Dropbox/code/mcStartSearch.R')
run_mcmc(3,2,fixed_g=FALSE,g=1,coal_type=3,gam=1,const_coal=TRUE,noise=1/500,seed=sample(1000000000,1),
burn_iter=10000,iter=10000)
require(Matrix)
require(igraph)
require(matrixStats)
source('~/Dropbox/code/mcStartSearch.R')
source('~/Dropbox/code/findG_HMC.R')
source('~/Dropbox/code/findG_MH4.R')
source('~/Dropbox/code/findG_MH4_com.R')
source('~/Dropbox/code/findG2.R')
source('~/Dropbox/code/run_mcmc.R')
seed <- sample(1000000000,1)
set.seed(seed)
width <- 4
height <- 4
n <- width*height
G_adj <- get.adjacency(make_lattice(c(width,height)))
G <- G_adj
G <- as(G,"symmetricMatrix")
ng <- length(G_adj@x)
g <- sample(c(rep(.5,ng/4),rep(2,ng/4)))
G@x <- g
G <- as(G,"dgCMatrix")
g <- G@x   #get all values out
gr <- graph_from_adjacency_matrix(G_adj,mode="directed",weighted=TRUE)
E(gr)$curved <- TRUE
plot(gr,layout=as.matrix(expand.grid(1:width,1:height)),edge.width=g,edge.label=paste0("g",1:ng,"=",round(g*1000)/1000),
main="4x4 Symmetric Graph")
burn_iter <- 1e6
iter <- 4e6
a4x4s_com <- run_mcmc(width,height,fixed_g=TRUE,g=g,coal_type=4,gam=rep(2,n),const_coal=TRUE,noise=1/1000,seed=sample(1000000000,1),
burn_iter=burn_iter,iter=iter,type="com")
boxplot(a4x4s_com$ans$g[100*(1:(iter/100)),order(g)],outline=FALSE,main="4x4 Symmetric Graph (Commute Time Inference)",
names=paste0("g",order(g)),xlab="Parameter Index",ylab="Parameter Value (rate)",las=2)
points(g[order(g)],pch=19,col=3)
burn_iter_coal <- 1e6
iter_coal <- 4e6
a4x4s_coal <- run_mcmc(width,height,fixed_g=TRUE,g=g,coal_type=4,gam=rep(2,n),const_coal=TRUE,noise=1/1000,seed=sample(1000000000,1),
burn_iter=burn_iter_coal,iter=iter_coal,type="coal")
boxplot(a4x4s_com$ans$g[100*(1:(iter/100)),order(g)],outline=FALSE,main="4x4 Symmetric Graph (Coalescence Time Inference)",
names=paste0("g",order(g)),xlab="Parameter Index",ylab="Parameter Value (rate)",las=2)
points(g[order(g)],pch=19,col=3)
boxplot(a4x4s_coal$ans$g[100*(1:(iter_coal/100)),order(g)],outline=FALSE,main="4x4 Symmetric Graph (Coalescence Time Inference)",
names=paste0("g",order(g)),xlab="Parameter Index",ylab="Parameter Value (rate)",las=2)
points(g[order(g)],pch=19,col=3)
path <- '~/Documents/gene-flow-inference/'
source(paste0(path,'run.mcmc.R'))
require(Matrix)
require(igraph)
require(matrixStats)
seed <- sample(1000000000,1)
set.seed(seed)
width <- 3
height <- 2
n <- width*height
G_adj <- get.adjacency(make_lattice(c(width,height)))
G <- G_adj
G <- as(G,"symmetricMatrix")
ng <- length(G_adj@x)
g <- rexp(ng/2,1)
g <- .1*ceiling(10*g)
G@x <- g
G <- as(G,"dgCMatrix")
g <- G@x   #get all values out
gr <- graph_from_adjacency_matrix(G_adj,mode="directed",weighted=TRUE)
E(gr)$curved <- TRUE
plot(gr,layout=as.matrix(expand.grid(1:width,1:height)),edge.width=g,edge.label=paste0("g",1:ng,"=",round(g*1000)/1000),
main="3x2 Symmetric Graph")
preburn_iter <- 2e4
burn_iter <- 4e4
iter <- 1e5
set.seed(sample(1000000,1))
a3x2s_com <- run.mcmc(width,height,fixed_g=TRUE,g=g,coal_type=4,gam=rep(1,n),const_coal=TRUE,noise=1/500,seed=seed,
preburn_iter=preburn_iter,burn_iter=burn_iter,iter=iter,noisy_H=TRUE,type="com",path=path)
boxplot(a3x2s_com$ans$g[10*(1:(iter/10)),order(g)],outline=FALSE,main="3x2 Symmetric Graph (Commute Time Inference)",
names=paste0("g",order(g)),xlab="Parameter Index",ylab="Parameter Value (rate)",las=2)
points(g[order(g)],pch=19,col=3)
preburn_iter_coal <- 2e4
burn_iter_coal <- 4e4
iter_coal <- 1e5
a3x2s_coal <- run.mcmc(width,height,fixed_g=TRUE,g=g,coal_type=4,gam=rep(1,n),const_coal=TRUE,noise=1/500,seed=seed,
preburn_iter=preburn_iter_coal,burn_iter=burn_iter_coal,iter=iter_coal,noisy_H=TRUE,type="coal",path=path)
boxplot(a3x2s_coal$ans$g[10*(1:(iter_coal/10)),order(g)],outline=FALSE,main="3x2 Symmetric Graph (Coalescence Time Inference)",
names=paste0("g",order(g)),xlab="Parameter Index",ylab="Parameter Value (rate)",las=2)
points(g[order(g)],pch=19,col=3)
a3x2s_coal_hmc <- findG.HMC(a3x2s_coal$H,G_adj,const_coal=TRUE,iter=10000,fixed_start=FALSE)
?file.path
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library(devtools)
devtools::install_github("klutometis/roxygen")
devtools::install_github("klutometis/roxygen")
devtools::install_github("klutometis/roxygen")
getwd()
setwd("/home/erik/Documents/gene-flow-inference/")
path <- getwd()
source(file.path(path,'run.mcmc.R'))
create("gene-flow-inference")
create("gene.flow.inference")
install("gene.flow.inference")
require(gene.flow.inference)
require(Matrix)
require(igraph)
require(matrixStats)
seed <- sample(1000000000,1)
set.seed(seed)
width <- 3
height <- 2
n <- width*height
G_adj <- get.adjacency(make_lattice(c(width,height)))
G <- G_adj
G <- as(G,"symmetricMatrix")
ng <- length(G_adj@x)
g <- rexp(ng/2,1)
g <- .1*ceiling(10*g)
G@x <- g
G <- as(G,"dgCMatrix")
g <- G@x   #get all values out
gr <- graph_from_adjacency_matrix(G_adj,mode="directed",weighted=TRUE)
E(gr)$curved <- TRUE
plot(gr,layout=as.matrix(expand.grid(1:width,1:height)),edge.width=g,edge.label=paste0("g",1:ng,"=",round(g*1000)/1000),
main="3x2 Symmetric Graph")
preburn_iter <- 2e4
burn_iter <- 4e4
iter <- 1e5
a3x2s_com <- run.mcmc(width,height,fixed_g=TRUE,g=g,coal_type=4,gam=rep(1,n),const_coal=TRUE,noise=1/500,seed=seed,
preburn_iter=preburn_iter,burn_iter=burn_iter,iter=iter,noisy_H=TRUE,type="com",path=path)
a3x2s_com <- run.mcmc(width,height,fixed_g=TRUE,g=g,coal_type=4,gam=rep(1,n),const_coal=TRUE,noise=1/500,seed=seed,
preburn_iter=preburn_iter,burn_iter=burn_iter,iter=iter,noisy_H=TRUE,type="com")
preburn_iter_coal <- 2e4
burn_iter_coal <- 4e4
iter_coal <- 1e5
a3x2s_coal <- run.mcmc(width,height,fixed_g=TRUE,g=g,coal_type=4,gam=rep(1,n),const_coal=TRUE,noise=1/500,seed=seed,
preburn_iter=preburn_iter_coal,burn_iter=burn_iter_coal,iter=iter_coal,noisy_H=TRUE,type="coal")
?run.mcmc
install("gene.flow.inference")
require(gene.flow.inference)
library(gene.flow.inference)
a3x2s_com <- run.mcmc(width,height,fixed_g=TRUE,g=g,coal_type=4,gam=rep(1,n),const_coal=TRUE,noise=1/500,seed=seed,
preburn_iter=preburn_iter,burn_iter=burn_iter,iter=iter,noisy_H=TRUE,type="com")
install("gene.flow.inference")
library(gene.flow.inference)
a3x2s_com <- run.mcmc(width,height,fixed_g=TRUE,g=g,coal_type=4,gam=rep(1,n),const_coal=TRUE,noise=1/500,seed=seed,
preburn_iter=preburn_iter,burn_iter=burn_iter,iter=iter,noisy_H=TRUE,type="com")
install("gene.flow.inference")
a3x2s_com <- run.mcmc(width,height,fixed_g=TRUE,g=g,coal_type=4,gam=rep(1,n),const_coal=TRUE,noise=1/500,seed=seed,
preburn_iter=preburn_iter,burn_iter=burn_iter,iter=iter,noisy_H=TRUE,type="com")
library(gene.flow.inference)
a3x2s_com <- run.mcmc(width,height,fixed_g=TRUE,g=g,coal_type=4,gam=rep(1,n),const_coal=TRUE,noise=1/500,seed=seed,
preburn_iter=preburn_iter,burn_iter=burn_iter,iter=iter,noisy_H=TRUE,type="com")
install("gene.flow.inference")
library(gene.flow.inference)
a3x2s_com <- run.mcmc(width,height,fixed_g=TRUE,g=g,coal_type=4,gam=rep(1,n),const_coal=TRUE,noise=1/500,seed=seed,
preburn_iter=preburn_iter,burn_iter=burn_iter,iter=iter,noisy_H=TRUE,type="com")
install("gene.flow.inference")
install("gene.flow.inference")
install("gene.flow.inference")
install("gene.flow.inference")
install("gene.flow.inference")
library(gene.flow.inference)
a3x2s_com <- run.mcmc(width,height,fixed_g=TRUE,g=g,coal_type=4,gam=rep(1,n),const_coal=TRUE,noise=1/500,seed=seed,
preburn_iter=preburn_iter,burn_iter=burn_iter,iter=iter,noisy_H=TRUE,type="com")
install("gene.flow.inference")
library(gene.flow.inference)
a3x2s_com <- run.mcmc(width,height,fixed_g=TRUE,g=g,coal_type=4,gam=rep(1,n),const_coal=TRUE,noise=1/500,seed=seed,
preburn_iter=preburn_iter,burn_iter=burn_iter,iter=iter,noisy_H=TRUE,type="com")
install("gene.flow.inference")
a3x2s_com <- run.mcmc(width,height,fixed_g=TRUE,g=g,coal_type=4,gam=rep(1,n),const_coal=TRUE,noise=1/500,seed=seed,
preburn_iter=preburn_iter,burn_iter=burn_iter,iter=iter,noisy_H=TRUE,type="com")
install("gene.flow.inference")
a3x2s_com <- run.mcmc(width,height,fixed_g=TRUE,g=g,coal_type=4,gam=rep(1,n),const_coal=TRUE,noise=1/500,seed=seed,
preburn_iter=preburn_iter,burn_iter=burn_iter,iter=iter,noisy_H=TRUE,type="com")
install("gene.flow.inference")
a3x2s_com <- run.mcmc(width,height,fixed_g=TRUE,g=g,coal_type=4,gam=rep(1,n),const_coal=TRUE,noise=1/500,seed=seed,
preburn_iter=preburn_iter,burn_iter=burn_iter,iter=iter,noisy_H=TRUE,type="com")
install("gene.flow.inference")
a3x2s_com <- run.mcmc(width,height,fixed_g=TRUE,g=g,coal_type=4,gam=rep(1,n),const_coal=TRUE,noise=1/500,seed=seed,
preburn_iter=preburn_iter,burn_iter=burn_iter,iter=iter,noisy_H=TRUE,type="com")
install("gene.flow.inference")
a3x2s_com <- run.mcmc(width,height,fixed_g=TRUE,g=g,coal_type=4,gam=rep(1,n),const_coal=TRUE,noise=1/500,seed=seed,
preburn_iter=preburn_iter,burn_iter=burn_iter,iter=iter,noisy_H=TRUE,type="com")
install("gene.flow.inference")
a3x2s_com <- run.mcmc(width,height,fixed_g=TRUE,g=g,coal_type=4,gam=rep(1,n),const_coal=TRUE,noise=1/500,seed=seed,
preburn_iter=preburn_iter,burn_iter=burn_iter,iter=iter,noisy_H=TRUE,type="com")
install("gene.flow.inference")
a3x2s_com <- run.mcmc(width,height,fixed_g=TRUE,g=g,coal_type=4,gam=rep(1,n),const_coal=TRUE,noise=1/500,seed=seed,
preburn_iter=preburn_iter,burn_iter=burn_iter,iter=iter,noisy_H=TRUE,type="com")
install("gene.flow.inference")
a3x2s_com <- run.mcmc(width,height,fixed_g=TRUE,g=g,coal_type=4,gam=rep(1,n),const_coal=TRUE,noise=1/500,seed=seed,
preburn_iter=preburn_iter,burn_iter=burn_iter,iter=iter,noisy_H=TRUE,type="com")
install("gene.flow.inference")
a3x2s_com <- run.mcmc(width,height,fixed_g=TRUE,g=g,coal_type=4,gam=rep(1,n),const_coal=TRUE,noise=1/500,seed=seed,
preburn_iter=preburn_iter,burn_iter=burn_iter,iter=iter,noisy_H=TRUE,type="com")
boxplot(a3x2s_com$ans$g[10*(1:(iter/10)),order(g)],outline=FALSE,main="3x2 Symmetric Graph (Commute Time Inference)",
names=paste0("g",order(g)),xlab="Parameter Index",ylab="Parameter Value (rate)",las=2)
points(g[order(g)],pch=19,col=3)
preburn_iter_coal <- 2e3
burn_iter_coal <- 4e3
iter_coal <- 1e3
a3x2s_coal <- run.mcmc(width,height,fixed_g=TRUE,g=g,coal_type=4,gam=rep(1,n),const_coal=TRUE,noise=1/500,seed=seed,
preburn_iter=preburn_iter_coal,burn_iter=burn_iter_coal,iter=iter_coal,noisy_H=TRUE,type="coal")
install("gene.flow.inference")
a3x2s_coal <- run.mcmc(width,height,fixed_g=TRUE,g=g,coal_type=4,gam=rep(1,n),const_coal=TRUE,noise=1/500,seed=seed,
preburn_iter=preburn_iter_coal,burn_iter=burn_iter_coal,iter=iter_coal,noisy_H=TRUE,type="coal")
boxplot(a3x2s_coal$ans$g[10*(1:(iter_coal/10)),order(g)],outline=FALSE,main="3x2 Symmetric Graph (Coalescence Time Inference)",
names=paste0("g",order(g)),xlab="Parameter Index",ylab="Parameter Value (rate)",las=2)
points(g[order(g)],pch=19,col=3)
install("gene.flow.inference")
install("gene.flow.inference")
igraph::plot(gr,layout=as.matrix(expand.grid(1:width,1:height)),edge.width=g,edge.label=paste0("g",1:ng,"=",round(g*1000)/1000),
main="3x2 Symmetric Graph")
Matrix::max(1:5)
gr <- graph_from_adjacency_matrix(G_adj,mode="directed",weighted=TRUE)
E(gr)$curved <- TRUE
plot(gr,layout=as.matrix(expand.grid(1:width,1:height)),edge.width=g,edge.label=paste0("g",1:ng,"=",round(g*1000)/1000),
main="3x2 Symmetric Graph")
?Matrix::diag
library(gene.flow.inference)
seed <- sample(1000000000,1)
set.seed(seed)
width <- 3
height <- 2
n <- width*height
G_adj <- get.adjacency(make_lattice(c(width,height)))
G <- G_adj
G <- as(G,"symmetricMatrix")
ng <- length(G_adj@x)
g <- rexp(ng/2,1)
g <- .1*ceiling(10*g)
G@x <- g
G <- as(G,"dgCMatrix")
g <- G@x   #get all values out
gr <- graph_from_adjacency_matrix(G_adj,mode="directed",weighted=TRUE)
E(gr)$curved <- TRUE
plot(gr,layout=as.matrix(expand.grid(1:width,1:height)),edge.width=g,edge.label=paste0("g",1:ng,"=",round(g*1000)/1000),
main="3x2 Symmetric Graph")
preburn_iter <- 2e4
burn_iter <- 4e4
iter <- 1e5
a3x2s_com <- run.mcmc(width,height,fixed_g=TRUE,g=g,coal_type=4,gam=rep(1,n),const_coal=TRUE,noise=1/500,seed=seed,
preburn_iter=preburn_iter,burn_iter=burn_iter,iter=iter,noisy_H=TRUE,type="com")
